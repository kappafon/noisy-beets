{"version":3,"sources":["components/display.tsx","components/pad.tsx","containers/drumPad.tsx","containers/drumMachine.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Display","props","id","className","value","Pad","audio","React","pressed","current","play","onClick","e","onButtonClicked","ref","src","useKey","key","setPressed","match","event","toLowerCase","onDown","onUp","window","addEventListener","removeEventListener","DrumPad","qKey","wKey","eKey","aKey","sKey","dKey","zKey","xKey","cKey","console","log","DrumMachine","result","setResult","App","isLocalhost","Boolean","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.4466e9b9.chunk.js","sourcesContent":["import * as React from 'react'\r\nimport './display.scss'\r\n\r\nexport interface DisplayProps {\r\n    value?: string\r\n    // formula?: string\r\n}\r\n\r\nconst Display: React.FC<DisplayProps> = props => {\r\n    // const { input = '0', formula = ' ' } = props\r\n    return (\r\n        <section id=\"display\" className=\"drum-machine__display\">\r\n            {props.value}\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default Display\r\n","import * as React from 'react'\r\nimport './pad.scss'\r\n\r\nexport interface PadProps {\r\n    id: string\r\n    value: string\r\n    src: string\r\n    pressed: boolean\r\n\r\n    onButtonClicked(id: string): void\r\n}\r\n\r\nconst Pad: React.FC<PadProps> = props => {\r\n    let audio: React.RefObject<HTMLAudioElement> = React.createRef()\r\n\r\n    React.useEffect(() => {\r\n        if (props.pressed) audio.current!.play()\r\n    })\r\n\r\n    const onButtonClicked = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\r\n        props.onButtonClicked(props.id)\r\n        audio.current!.play()\r\n    }\r\n\r\n    return (\r\n        <div id={props.id} className=\"drum-pad button\" onClick={onButtonClicked}>\r\n            {props.value}\r\n            <audio ref={audio} id={props.value} className=\"clip\" src={props.src} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Pad\r\n","import * as React from 'react'\r\nimport './drumPad.scss'\r\nimport Pad from '../components/pad'\r\n\r\nfunction useKey(key: any) {\r\n    // Keep track of key state\r\n    const [pressed, setPressed] = React.useState(false)\r\n\r\n    // Does an event match the key we're watching?\r\n    const match = (event: { key: { toLowerCase: () => void } }) =>\r\n        key.toLowerCase() == event.key.toLowerCase()\r\n\r\n    // Event handlers\r\n    const onDown = (event: { key: { toLowerCase: () => void } }) => {\r\n        if (match(event)) setPressed(true)\r\n    }\r\n\r\n    const onUp = (event: { key: { toLowerCase: () => void } }) => {\r\n        if (match(event)) setPressed(false)\r\n    }\r\n\r\n    // Bind and unbind events\r\n    React.useEffect(() => {\r\n        window.addEventListener('keydown', onDown)\r\n        window.addEventListener('keyup', onUp)\r\n        return () => {\r\n            window.removeEventListener('keydown', onDown)\r\n            window.removeEventListener('keyup', onUp)\r\n        }\r\n    }, [key])\r\n\r\n    return pressed\r\n}\r\n\r\nexport interface DrumPadProps {\r\n    onButtonClicked(value: string): void\r\n}\r\n\r\nconst DrumPad: React.FC<DrumPadProps> = props => {\r\n    const qKey = useKey('q')\r\n    const wKey = useKey('w')\r\n    const eKey = useKey('e')\r\n    const aKey = useKey('a')\r\n    const sKey = useKey('s')\r\n    const dKey = useKey('d')\r\n    const zKey = useKey('z')\r\n    const xKey = useKey('x')\r\n    const cKey = useKey('c')\r\n    console.log(qKey)\r\n\r\n    const onButtonClicked = (value: string) => {\r\n        props.onButtonClicked(value)\r\n    }\r\n    return (\r\n        <section className=\"pads__container\">\r\n            <div className=\"pads\">\r\n                <Pad\r\n                    pressed={qKey}\r\n                    id=\"chord-one\"\r\n                    value=\"Q\"\r\n                    onButtonClicked={onButtonClicked}\r\n                    src=\"https://s3.amazonaws.com/freecodecamp/drums/Chord_1.mp3\"\r\n                />\r\n                <Pad\r\n                    pressed={wKey}\r\n                    id=\"chord-two\"\r\n                    value=\"W\"\r\n                    onButtonClicked={onButtonClicked}\r\n                    src=\"https://s3.amazonaws.com/freecodecamp/drums/Chord_2.mp3\"\r\n                />\r\n                <Pad\r\n                    pressed={eKey}\r\n                    id=\"chord-three\"\r\n                    value=\"E\"\r\n                    onButtonClicked={onButtonClicked}\r\n                    src=\"https://s3.amazonaws.com/freecodecamp/drums/Chord_3.mp3\"\r\n                />\r\n                <Pad\r\n                    pressed={aKey}\r\n                    id=\"light\"\r\n                    value=\"A\"\r\n                    onButtonClicked={onButtonClicked}\r\n                    src=\"https://s3.amazonaws.com/freecodecamp/drums/Give_us_a_light.mp3\"\r\n                />\r\n                <Pad\r\n                    pressed={sKey}\r\n                    id=\"dry\"\r\n                    value=\"S\"\r\n                    onButtonClicked={onButtonClicked}\r\n                    src=\"https://s3.amazonaws.com/freecodecamp/drums/Dry_Ohh.mp3\"\r\n                />\r\n                <Pad\r\n                    pressed={dKey}\r\n                    id=\"hat\"\r\n                    value=\"D\"\r\n                    onButtonClicked={onButtonClicked}\r\n                    src=\"https://s3.amazonaws.com/freecodecamp/drums/Bld_H1.mp3\"\r\n                />\r\n                <Pad\r\n                    pressed={zKey}\r\n                    id=\"kick\"\r\n                    value=\"Z\"\r\n                    onButtonClicked={onButtonClicked}\r\n                    src=\"https://s3.amazonaws.com/freecodecamp/drums/punchy_kick_1.mp3\"\r\n                />\r\n                <Pad\r\n                    pressed={xKey}\r\n                    id=\"stick\"\r\n                    value=\"X\"\r\n                    onButtonClicked={onButtonClicked}\r\n                    src=\"https://s3.amazonaws.com/freecodecamp/drums/side_stick_1.mp3\"\r\n                />\r\n                <Pad\r\n                    pressed={cKey}\r\n                    id=\"snare\"\r\n                    value=\"C\"\r\n                    onButtonClicked={onButtonClicked}\r\n                    src=\"https://s3.amazonaws.com/freecodecamp/drums/Brk_Snr.mp3\"\r\n                />\r\n            </div>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default DrumPad\r\n","import * as React from 'react'\r\nimport './drumMachine.scss'\r\nimport Display from '../components/display'\r\nimport DrumPad from '../containers/drumPad'\r\nimport { useState, useEffect } from 'react'\r\n\r\nexport interface CalculatorProps {}\r\nconst DrumMachine: React.FC<CalculatorProps> = props => {\r\n    const [result, setResult] = React.useState<string | undefined>()\r\n\r\n    const onButtonClicked = (value: string) => {\r\n        setResult(value)\r\n    }\r\n\r\n    return (\r\n        <div className=\"drum-machine\">\r\n            <main className=\"drum-machine__container\" id=\"drum-machine\">\r\n                <Display value={result} />\r\n                <DrumPad onButtonClicked={onButtonClicked} />\r\n            </main>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DrumMachine\r\n","import React from 'react'\r\nimport './App.scss'\r\nimport DrumMachine from './containers/drumMachine'\r\n\r\nconst App: React.FC = () => {\r\n    return <DrumMachine />\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './App'\r\nimport * as serviceWorker from './serviceWorker'\r\n\r\nReactDOM.render(<App />, document.getElementById('root'))\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register()\r\n"],"sourceRoot":""}